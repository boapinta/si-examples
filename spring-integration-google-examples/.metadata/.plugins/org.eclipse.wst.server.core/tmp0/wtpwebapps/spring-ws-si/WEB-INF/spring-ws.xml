<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:p="http://www.springframework.org/schema/p" 
				xmlns:sws="http://www.springframework.org/schema/web-services"
    			xmlns:oxm="http://www.springframework.org/schema/oxm"
       			xsi:schemaLocation=
       				"http://www.springframework.org/schema/beans 
       				http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       	 			http://www.springframework.org/schema/web-services
       				http://www.springframework.org/schema/web-services/web-services-2.0.xsd
       				http://www.springframework.org/schema/oxm 
       				http://www.springframework.org/schema/oxm/spring-oxm-1.5.xsd">

    <description>
        This web application context contains Spring-WS beans. The beans defined in this context are automatically
        detected by Spring-WS, similar to the way Controllers are picked up in Spring Web MVC.
    </description>
 
 	<!-- We have two important URLs here: 
 	
		WSDL: http://localhost:8080/{projectName}/{root-path}/ws/{bean-name}.wsdl 
		Example: http://localhost:8080/spring-ws/krams/ws/ecommerce.wsdl
		
		Endpoint: http://localhost:8080/{projectName}/{root-path}/ws
		Example: http://localhost:8080/spring-ws/krams/ws
		
		These urls are based on the root path declared in the web.xml and in the SimpleUrlHandlerMapping -->
	
 	<!-- Uses the latest feature from 2.0.0 RC2. 
	 	Enables @Endpoint and related Spring-WS annotations. See Spring WS Reference 5.4-->
	 <sws:annotation-driven />
	 
	 <!-- Uses the latest feature from 2.0.0 RC2. 
	 	Enables interceptor endpoints. See Spring WS Reference 5.5.2
	 	Here we have an interceptor that validates XML request and a logger
	    -->
	 <sws:interceptors>
	 	    <bean id="validatingInterceptor"  class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor"
				        p:schema="/WEB-INF/ecommerce.xsd"
				        p:validateRequest="true"
				        p:validateResponse="true"/>

		    <bean id="loggingInterceptor" class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor"/>
	 </sws:interceptors>

	<!-- Uses the latest feature from 2.0.0 RC2. 
	 	Enables publishing of wsdl. See Spring WS Reference 3.7
	 	For dynamic location transformation to work, a special parameter must be added to the web.xml.
	 	The locationUri here has no use when integrated with Spring MVC because 
	 	it has been overriden by the SimpleUrlHandlerMapping -->
    <sws:dynamic-wsdl id="subscription"                                                           
	    portTypeName="SubscriptionPort"                                                         
	    locationUri="/"                                                       
	    targetNamespace="http://krams915.blogspot.com/ws/schema/oss">                               
	  <sws:xsd location="/WEB-INF/ecommerce.xsd"/>                                                  
	</sws:dynamic-wsdl>

	<!-- Here we use the Jaxb2 marshaller to marshall and unmarshall our Java objects -->
	 <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"
	  p:contextPath="org.krams.tutorial.oxm"/>
 
 	<!-- Normally we use the GenericMarshallingMethodEndpointAdapter however if you read the Spring WS 2.0 API for this adapter:
 	 "Deprecated. as of Spring Web Services 2.0, in favor of DefaultMethodEndpointAdapter and MarshallingPayloadMethodProcessor."
 	 See http://static.springsource.org/spring-ws/sites/2.0/apidocs/org/springframework/ws/server/endpoint/adapter/GenericMarshallingMethodEndpointAdapter.html
 	 
 	 So we have to implement using the recommended implementation. The advantage of these two classes is that
 	 we have a pluggable adapter. For more info, check the Spring WS 2.0 API and its source code. -->
	<bean id="marshallingPayloadMethodProcessor" class="org.springframework.ws.server.endpoint.adapter.method.MarshallingPayloadMethodProcessor">
		<constructor-arg ref="jaxbMarshaller"/>
		<constructor-arg ref="jaxbMarshaller"/>
	</bean>
	
	<bean id="defaultMethodEndpointAdapter" class="org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter">
		<property name="methodArgumentResolvers">
			<list>
				<ref bean="marshallingPayloadMethodProcessor"/>
			</list>	
		</property>
		<property name="methodReturnValueHandlers">
			<list>
				<ref bean="marshallingPayloadMethodProcessor"/>
			</list>
		</property>
	</bean>
</beans>